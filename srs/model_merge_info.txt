

The modelclass.csv shown below is used to allocate the output nodes of the
merged multi-head classification model. It is utilized by the 'model_merger.py'
script to map each individual binary classification model (m(n).pth) to its
synthetic class label ("class1") and a shared real-data label ("class0").

  • m(n).pth = binary classification model
  • Synthetic(n) → string indicating the synthetic class label (class1)
  • Real (static) → always denotes the “real” class (class0)

```model_filename,synthetic_class,real_class
m1.pth,SyntheticOne,Real
m2.pth,SyntheticTwo,Real
m3.pth,SyntheticThree,Real
m4.pth,SyntheticFour,Real
m5.pth,SyntheticFive,Real
m6.pth,SyntheticSix,Real
m7.pth,SyntheticSeven,Real
m8.pth,SyntheticEight,Real```

The summary and topograpy of the merged model will be expressed mathmatically as:

╔══════════════════════════════════════════════════════════════════════════════╗
║        M U L T I - H E A D   B I N A R Y   C L A S S I F I C A T I O N       ║
║             W I T H   S H A R E D   F E A T U R E   L E A R N I N G          ║
╚══════════════════════════════════════════════════════════════════════════════╝

1. Overview
───────────
This document provides a concise description of a multi-head binary classification
framework capable of distinguishing multiple "synthetic" classes from "real" data.
A shared feature extraction stage is combined with multiple classification heads
(X_i), each responsible for detecting one synthetic class, alongside a single,
shared classifier (Y) that identifies real data.

2. Model Architecture
─────────────────────
The proposed architecture includes:
• A shared feature extraction mechanism (e.g., convolutional layers or other
  representation learning components).
• Multiple binary classification heads X_1, X_2, …, X_N, with each head
  detecting a specific synthetic class.
• A single, shared output node Y, which indicates whether an input corresponds
  to real data.

A schematic (using Unicode box-drawing) illustrating the high-level topology
is shown below:

┌────────────────────────────────────────────────────────────────┐
│ Shared Feature Extraction Layers (e.g., CNN blocks, etc.)      │
├─────────────────────┬─────────────────────┬────────────────────┤
│   Submodel  X₁      │   Submodel  X₂      │   Submodel  X₃     │
│  (binary output)    │  (binary output)    │  (binary output)   │
├─────────────▲───────┴──────▲──────────────┴─────────▲──────────┤
│             │              │                        │          │
│             ╰───── Y (shared real-data classifier) ─╯          │
└────────────────────────────────────────────────────────────────┘

Final Output: ( X₁(x), X₂(x), …, Xₙ(x), Y(x) )

3. Mathematical Formulation
───────────────────────────
Let x ∈ ℝ^d be an input. Each submodel Xᵢ computes:

  Xᵢ(x) = 1  if x is inferred to belong to synthetic class i
          0  otherwise

All submodels share a single real-data node Y, defined as:

  Y(x) = 1   if x is inferred to be real
         0   otherwise

A common decision strategy for final classification C(x) can be:

1. If Y(x) = 1 and ∑ᵢ Xᵢ(x) = 0, then classify as “Real.”
2. If there exists an i such that Xᵢ(x) = 1, classify as “Synthetic” of the
   corresponding class i.
3. If multiple Xᵢ(x) = 1, apply a conflict resolution (e.g., confidence-based tie
   breaker or a fallback label).

4. Design Rationale
───────────────────
• Modularity: Each synthetic class is detected by a distinct submodel (Xᵢ),
  allowing future extension (Xₙ₊₁, Xₙ₊₂, etc.) without exhaustive retraining.
• Shared Real-Data Detection: The single Y node ensures a consistent criterion
  for real data across all submodels.
• Parameter Efficiency: Shared feature extraction removes the need for
  replicating lower-level feature representations, thus lowering overall
  computational and storage requirements.
• Scalability: The architecture scales naturally as new classes are introduced,
  without necessitating changes to existing learned weights.


